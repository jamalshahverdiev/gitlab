import logging
from os import getenv, environ
from json import dump
from re import search
from flask import Flask, request, abort, jsonify
from requests import put, get, delete
from jira import JIRA
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
SECRET_TOKEN = getenv("SECRET_TOKEN")
slack_token = environ["SLACK_API_TOKEN"]
client = WebClient(token=slack_token)

def jira_ticket_validation(mr_description):
    jira_ticket_regex = r"Closes (\w+-\d+)"
    match = search(jira_ticket_regex, mr_description)
    
    if not match:
        logger.warning("No Jira ticket ID found in the merge request description.")
        return None
    
    jira_ticket_id = match.group(1)
    logger.info(f"Found Jira ticket ID: {jira_ticket_id}")

    jira_server = getenv('JIRA_SERVER')
    jira_username = getenv('JIRA_USERNAME')
    jira_token = getenv('JIRA_API_TOKEN')
    
    if not all([jira_server, jira_username, jira_token]):
        logger.error("Jira credentials or server URL not set in environment variables.")
        abort(500, description="Jira credentials or server URL not set in environment variables.")
    
    jira_options = {'server': jira_server}
    jira = JIRA(options=jira_options, basic_auth=(jira_username, jira_token))
    
    try:
        issue = jira.issue(jira_ticket_id)
        logger.info(f"Successfully fetched Jira ticket: {jira_ticket_id}, Summary: {issue.fields.summary}")
        
        # Create and attach a JSON file
        file_content = {
            "message": "This file is generated by WebHook",
            "jira_ticket_id": jira_ticket_id,
            "summary": issue.fields.summary,
        }
        with open("generated_by_webhook.json", "w") as json_file:
            dump(file_content, json_file)
        
        with open("generated_by_webhook.json", "rb") as f:
            jira.add_attachment(issue=issue, attachment=f)

        # Add a comment in red color
        comment = f"{{color:red}}Comment written by WebHook{{color}}"
        jira.add_comment(issue, comment)

        return {"status": "valid", "summary": issue.fields.summary, "ticket_id": jira_ticket_id}
    except Exception as e:
        logger.warning(f"Failed to fetch Jira ticket: {jira_ticket_id}. Error: {str(e)}")
        return {"status": "invalid", "error": str(e), "ticket_id": None}

def return_mail_by_name(data):
    try:
        user_name = data['user']['name']
        formatted_user_name = user_name.replace(' ', '.').lower() + "@domain.com"
        return {"email": formatted_user_name}
    except Exception as e:
        logger.error(f"An error occurred while retrieving and formatting user name: {str(e)}")
        return {"email": None, "error": str(e)}

def post_to_slack(user_email, mr_url, jira_ticket):
    try:
        # Lookup user by email
        lookup_result = client.users_lookupByEmail(email=user_email)
        user_id = lookup_result['user']['id']
        
        logger.info(f"User ID: {user_id}")
        
        # Send a message
        client.chat_postMessage(
            channel=user_id,
            text=f"""
Hello! 
Your <{mr_url}|Merge Request> is closed. 
Issue: Jira ticket with number like as `{jira_ticket}` not present inside of the MR desctription.
            """
        )
        logger.info(f"Message sent to {user_email} regarding MR {mr_url} and Jira ticket {jira_ticket}")

    except SlackApiError as e:
        logger.error(f"Error sending message: {e.response['error']}")
        return {"success": False, "error": e.response['error']}
    except Exception as e:
        logger.error(f"An unexpected error occurred: {str(e)}")
        return {"success": False, "error": str(e)}

    return {"success": True}

def close_mr_and_notify(data):
    GITLAB_URL = getenv("GITLAB_URL")
    GITLAB_TOKEN = getenv('GITLAB_TOKEN')
    if not GITLAB_TOKEN:
        logger.error("GITLAB_TOKEN is not set in environment variables.")
        return jsonify({"error": "GITLAB_TOKEN is not available. Please set it in environment variables."}), 500

    mr_id = data['object_attributes']['iid']
    project_id = data['project']['id']
    mr_description = data['object_attributes']['description']

    author_email_response = return_mail_by_name(data)
    if author_email_response["email"] is None:
        logger.error(f"Error retrieving email: {author_email_response['error']}")
        return jsonify({"error": f"Failed to retrieve or format the user email due to: {author_email_response['error']}"}), 500
    
    author_email = author_email_response["email"]
    logger.info(f"Author email: {author_email}.")
    jira_response = jira_ticket_validation(mr_description)

    if jira_response is None or (jira_response['ticket_id'] is None and jira_response['status'] != "valid"):
        logger.info(f"No valid Jira ticket found, or Jira response is None. Closing MR and notifying on Slack.")

        # Fetch Merge Request Information
        gitlab_api_url = f"{GITLAB_URL}/api/v4/projects/{project_id}/merge_requests/{mr_id}"
        headers = {'Private-Token': GITLAB_TOKEN}

        try:
            response = get(gitlab_api_url, headers=headers)
            response_data = response.json()
            mr_web_url = response_data.get('web_url', '')
            mr_description = response_data.get('description', '')
        except Exception as e:
            logger.error(f"Failed to fetch merge request {mr_id} info. Exception: {str(e)}")
            return jsonify({"error": f"Failed to communicate with GitLab API. Please try again later."}), 500

        # Use the fetched data for Slack notification
        if not mr_description:
            mr_description = "MR description is empty"
        post_to_slack(author_email, mr_web_url, mr_description)

        # Close Merge Request
        try:
            response = put(gitlab_api_url, headers=headers, json={"state_event": "close"})
        except Exception as e:
            logger.error(f"Failed to close merge request {mr_id}. Exception: {str(e)}")
            return jsonify({"error": f"Failed to communicate with GitLab API. Please try again later."}), 500

        if response.status_code == 200:
            logger.info(f"Merge request {mr_id} closed successfully.")
            # return jsonify({"message": f"Merge request {mr_id} closed successfully."})
            try:
                delete_response = delete(gitlab_api_url, headers=headers)
                if delete_response.status_code == 204:
                    logger.info(f"Merge request {mr_id} deleted successfully.")
                    return jsonify({"message": f"Merge request {mr_id} deleted successfully."})
                else:
                    logger.error(f"Failed to delete merge request {mr_id}. Error: {delete_response.text}")
                    return jsonify({"error": f"Failed to delete merge request {mr_id}. API Error: {delete_response.text}"}), 500
            except Exception as e:
                logger.error(f"Failed to delete merge request {mr_id}. Exception: {str(e)}")
                return jsonify({"error": f"Failed to communicate with GitLab API. Please try again later."}), 500
        else:
            logger.error(f"Failed to close merge request {mr_id}. Error: {response.text}")
            return jsonify({"error": f"Failed to close merge request {mr_id}. API Error: {response.text}"}), 500
    
    elif jira_response['status'] == "valid":
        logger.info(f"Jira ticket {jira_response['ticket_id']} is valid.")
        return jsonify({"message": "Jira ticket is valid."})
    else:
        logger.warning("Unhandled case: jira_response: {}".format(jira_response))
        return jsonify({"warning": "No valid action found, no operation performed"}), 200


@app.route("/webhook", methods=["POST"])
def gitlab_webhook():
    logger.info("Received Webhook call")
    
    request_token = request.headers.get("X-Gitlab-Token")
    if not request_token or request_token != SECRET_TOKEN:
        logger.error("Unauthorized: Invalid secret token.")
        abort(401, description="Unauthorized: Invalid secret token.")
    
    data = request.get_json()
    try:
        object_kind = data.get('object_kind', "")
    except KeyError as e:
        logger.error(f"Error extracting data from payload: {str(e)}")
        abort(400, description="Required data not found in payload.")
    
    # Handling merge request event
    if object_kind == 'merge_request':
        if data['object_attributes']['action'] in ['open', 'update']:
            response = close_mr_and_notify(data)  
            return response
        
        return jsonify({"message": "Merge request event received, no action performed."})
    
    else:
        logger.warning("Unhandled event type")
        return jsonify({"message": "Unhandled event type", "event_name": object_kind})

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080)
